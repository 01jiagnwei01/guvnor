<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd"
         xml:base="../" xmlns="http://docbook.org/ns/docbook" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:ns="http://docbook.org/ns/docbook">
  <title>Administration guide</title>






  <section>
    <title>Fine grained permissions and security</title>

    <para>The above section talks about establishing identity and access for
    users. This section talks about granting specific permissions to these
    users (to control data visibility and access). This can be used to
    partition data, or to control access for "non power users" which can limit
    the damage they can do.</para>

    <figure>
      <title>Administer user permissions</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissions.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>A common need and desire of the web interface of Guvnor is to be
    able to have users of different technical abilities interact with it.
    Another need is to be able to allocate people different sets of data to
    "own".</para>

    <para>Typically users identities are managed in a centralised directory -
    application servers can integrate with these directories (eg active
    directory, LDAP) so users to guvnor can be authenticated without having to
    create another duplicate identity. It is also possible (thanks to JAAS) to
    define what users have the "admin" role for Guvnor (note that an Admin
    user of Guvnor doesn't have to really be a system administrator). Further
    to this, guvnor augments this identity with data specific permissions,
    which are managed in Guvnor itself.</para>

    <figure>
      <title>User listing</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissionsList.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>Note that the above users identities are not stored in Guvnor, only
    their permission mappings are which are specific to Guvnor.</para>

    <para>There are really 2 system wide roles: Users who are Administrators
    and users who are not. Easy ! Administrators can see and do anything. Out
    of the box, the permission system is turned off, and every user is an
    administrator (this is pretty much how things used to work). There is also
    a system setting in components.xml that can turn the permissions system on
    and off (so people can manually override if needs be). A administrator can
    also give other users admin rights, regardless of their roles in the
    external directory service.</para>

    <figure>
      <title>Editing</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminPermissionEdit.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>There are several types of permissions: Per package: Package
    Administrator ("owns" a package - can deploy etc, but has no
    administrative rights to the system). Package developer - this permissions
    allows users to create new items, edit etc - but only at the package level
    (not deploy). They can also run and create tests. Package readonly - well
    this one is pretty obvious. Per Category: This is the "interesting" one -
    as assets (rules) can be tagged with multiple categories, you can use
    these to assign permissions to an "analyst" type of user. A user can be
    assigned multiple categories. A user can then edit and view any asset that
    is tagged in that category (regardless of package). A user that only has
    category permissions will not be shown any package views or details, and
    will only see the simple categories view. This allows administrators and
    managers to control exactly what these users can and can't see. Note that
    per category permissions can also be set as "read only" so a user can view
    all the assets in a category, but not make changes to them.</para>

    <figure>
      <title>The analyst view</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center"
                     fileref="images/Chapter-Guvnor/AdminAnalyst.png"
                     format="PNG" scalefit="1"></imagedata>
        </imageobject>
      </mediaobject>
    </figure>

    <para>The per category "analyst" permissions are quite useful - you can
    also augment their permissions with a specific package (so on top of their
    category rights, they can see and play with a particular package - which
    may be used as a "practice" area, or test area for instance). This
    provides a few ways to manage permissions in a coarse or fine grained way,
    as suits the different types of users.</para>

    <section>
      <title>Enabling fine grained authorization</title>

      <para>By default authorization is not enabled. To enable it, edit the
      components.xml file in the WEB-INF directory:</para>

      <programlisting language="xml">
        &lt;component name="org.jboss.seam.security.roleBasedPermissionResolver"&gt;
          &lt;property name="enableRoleBasedAuthorization">false&lt;/property&gt;
        &lt;/component&gt;
      </programlisting>
    </section>
  </section>

  <section>
    <title>Data management</title>

    <section>
      <title>Backups</title>

      <para>How backups are performed is dependent on what persistence manager
      scheme you are using. Using the default one - then its a matter of
      backing up the repository directory (wherever you have it configured to
      be). Restoring it is simply a matter of copying across the repository
      directory.</para>

      <para>Ideally you will either stop Guvnor application while a file
      backup is being done, or ensure that no one is using it.</para>

      <para>In the case of using an external database (eg Oracle, MySQL), then
      the normal scheme can apply that you would use to backup those database
      (you do back them up, right?). In this case, when restoring, it is also
      a good idea to clear the indexes (delete the directory where the indexes
      are) so they are created fresh from the data (and thus guaranteed to be
      in sync).</para>
    </section>

    <section>
      <title>Selectors for package building</title>
      
      <para>When building packages (from the "Packages" feature) you have the
      option to use a "selector". This selector will filter the list of rules 
      that are built into the package. </para>
      
      <para>Guvnor provides several built-in selectors which allow you to choose 
      what assets form part of a package build according to asset's status 
      and category.</para>
      
      <para>You can use a custom selector if the built-in selector does not 
      satisfy your requirement. To configure a custom selector, you will need to 
      "explode" the war file for Guvnor, and locate the selectors.properties 
      file (note you can also put your own selectors.properties file in the system 
      classpath if you like). In this file, you will find details on how you 
      can configure a custom selector. The options are to use a drl file, or 
      the name of a class that you have written (and which is available on 
      the classpath). Classes must implement the AssetSelector interface. DRL 
      files can also be used (there is an example one in the selectors.properties 
      file). Each selector you configure has a unique name in this properties 
      file - and this is the name that you can use when building packages.</para>
    </section>

    <section>
      <title>Adding your own logos or styles to Guvnor web GUI</title>

      <para>To achieve, this, you can "explode" the deployment war file, and
      locate the Guvnor.html file, which will look something like the
      following: .</para>

      <programlisting language="xml">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;!-- Note you can append #asset=UUID to the end of the URL to preload a given asset.
         Also, if you appent #asset=UUID&amp;nochrome it will only show the asset without all the GUI "chrome"

         To select a locale, specify &amp;locale=en_US at the end of the URL to pick the appropriate bundle.
         --&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
      &lt;meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" /&gt;
      &lt;title&gt;JBoss Guvnor&lt;/title&gt;

      ..........

   &lt;/body&gt;
&lt;/html&gt;</programlisting>

      <para>Note that the above Guvnor.html file is fairly small (as most of
      the work is done by the GWT - the GUI is built dynamically in the
      browser). The parts you can customise are the style sheet - you can
      either edit the Guvnor.css (or better yet, take a copy, and change the
      style to be what you need), the "shortcut icon" (its what shows in the
      address bar in the browser etc - also change the "icon" link to be the
      same so it works in IE), and the header logo. The rest should be left as
      is, to allow the GWT components to be loaded and attached to the page.
      This html page is loaded only once by the browser when the user accesses
      Guvnor web GUI.</para>

      <para>The best way to customize is to take a copy of the Guvnor.html -
      and then edit. You can also change the URL by editing the web.xml via
      the normal means.</para>
    </section>

    <section>
      <title>Import and Export</title>

      <para>A JCR standard export/import feature is available from the Admin
      part of the web interface.</para>

      <para>This will export the entire repository to an XML format as defined
      by the JCR standard.</para>

      <para>In the case of import, it will clear any existing content in the
      database.</para>

      <para>This is NOT a substitute for backup but can be useful when
      migrating. It is important to note that version history is not exported
      this way, only the current state. Hence it is still recommended that a
      formal backup regime be used at all times on the repository database
      itself.</para>

      <para>
  Note that when importing repositories with many thousands of items, extra memory will be required (just for the import).
      </para>
    </section>
  </section>
</section>
